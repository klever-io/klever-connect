syntax = "proto3";

package proto;

option go_package = "./;transaction";

import "google/protobuf/any.proto";

// TXContract available
message TXContract {
    enum ContractType {
        TransferContractType                  = 0;
        CreateAssetContractType               = 1;
        CreateValidatorContractType           = 2;
        ValidatorConfigContractType           = 3;
        FreezeContractType                    = 4;
        UnfreezeContractType                  = 5;
        DelegateContractType                  = 6;
        UndelegateContractType                = 7;
        WithdrawContractType                  = 8;
        ClaimContractType                     = 9;
        UnjailContractType                    = 10;
        AssetTriggerContractType              = 11;
        SetAccountNameContractType            = 12;
        ProposalContractType                  = 13;
        VoteContractType                      = 14;
        ConfigITOContractType                 = 15;
        SetITOPricesContractType              = 16;
        BuyContractType                       = 17;
        SellContractType                      = 18;
        CancelMarketOrderContractType         = 19;
        CreateMarketplaceContractType         = 20;
        ConfigMarketplaceContractType         = 21;
        UpdateAccountPermissionContractType   = 22;
        DepositContractType                   = 23;
        ITOTriggerContractType                = 24;

        SmartContractType                     = 63;
    }
    ContractType Type                 = 1 [json_name = "type"];
    google.protobuf.Any Parameter     = 2 [json_name = "parameter"];
}

// Transaction holds all the data needed for a value transfer
message Transaction {
    enum TXResult {
        SUCCESS = 0;
        FAILED  = 1;
    }

    enum TXResultCode {
        Ok                       = 0;
        OutOfFunds               = 1;
        AccountError             = 2;
        AssetError               = 3;
        ContractInvalid          = 4;
        ContractNotFound         = 5;
        FeeInvalid               = 6;
        ParameterInvalid         = 7;
        APRInvalid               = 8;
        AssetIDInvalid           = 9;
        AssetTypeInvalid         = 10;
        AssetCantBeMinted        = 11;
        AssetCantBeBurned        = 12;
        AssetCantBePaused        = 13;
        AssetCantBeDelegated     = 14;
        AssetOwnerCantBeChanged  = 15;
        AccountNotOwner          = 16;
        CommissionTooHigh        = 17;
        DelegationAmountInvalid  = 18;
        ProposalNotActive        = 19;
        ValueInvalid             = 20;
        AmountInvalid            = 21;
        BucketIDInvalid          = 22;
        KeyConflict              = 23;
        MaxDelegationAmount      = 24;
        InvalidPeerKey           = 25;
        MinKFIStakedUnreached    = 26;
        MaxSupplyExceeded        = 27;
        SaveAccountError         = 28;
        LoadAccountError         = 29;
        SameAccountError         = 30;
        AssetPaused              = 31;
        DeletegateError          = 32;
        WithdrawNotAvailable     = 33;
        ErrOverflow              = 34;
        SetStakingErr            = 35;
        SetMarketOrderErr        = 36;
        BalanceError             = 37;
        KAPPError                = 38;
        UnfreezeError            = 39;
        UndelegateError          = 40;
        WithdrawError            = 41;
        ClaimError               = 42;
        BucketsExceeded          = 43;
        AssetCantBeWiped         = 44;
        AssetCantAddRoles        = 45;
        FreezeError              = 46;
        ITONotActive             = 47;
        NFTMintStopped           = 48;
        RoyaltiesChangeStopped   = 49;
        ITOKAPPError             = 50;
        ITOWhiteListError        = 51;
        NFTMetadataChangeStopped = 52;
        AlreadyExists            = 53;
        IteratorLimitReached     = 54;
        VMFunctionNotFound       = 55;
        VMFunctionWrongSignature = 56;
        VMUserError              = 57;
        VMOutOfGas               = 58;
        VMAccountCollision       = 59;
        VMCallStackOverFlow      = 60;
        VMExecutionPanicked      = 61;
        VMExecutionFailed        = 62;
        VMUpgradeFailed          = 63;
        VMSimulateFailed         = 64;
        KDATransferNotAllowed    = 65;
        Fail                     = 99;
    }

    message KDAFee {
        bytes    KDA            = 1 [json_name = "kda"];
        int64    Amount         = 2 [json_name = "amount"];
    }

    message Raw {
        uint64   Nonce               = 1  [json_name = "nonce"];
        bytes    Sender              = 2  [json_name = "sender"];
        repeated TXContract Contract = 6  [json_name = "contract"];
        int32    PermissionID        = 7  [json_name = "permissionID,omitempty"];
        repeated bytes Data          = 10 [json_name = "data,omitempty"];
        int64    KAppFee             = 13 [json_name = "kAppFee"];
        int64    BandwidthFee        = 14 [json_name = "bandwidthFee"];
        uint32   Version             = 15 [json_name = "version,omitempty"];
        bytes    ChainID             = 16 [json_name = "chainID,omitempty"];
        KDAFee   KDAFee              = 17 [json_name = "kdaFee"];
    }

    message Receipt {
        repeated bytes Data = 1 [json_name = "data"];
    }

    Raw              RawData           = 1 [json_name = "rawData"];
    repeated bytes   Signature         = 2 [json_name = "signature,omitempty"];
    TXResult         Result            = 3 [json_name = "result,omitempty"];
    TXResultCode     ResultCode        = 4 [json_name = "resultCode,omitempty"];
    repeated Receipt Receipts          = 5 [json_name = "receipts"];
    uint64           Block             = 6 [json_name = "block"];
    uint64           GasLimit          = 7 [json_name = "gasLimit"];
    uint64           GasMultiplier     = 8 [json_name = "gasMultiplier"];
}